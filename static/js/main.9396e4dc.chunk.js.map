{"version":3,"sources":["Store.js","localStorage.js","Reducers.js","Actions.js","components/AppLayout.js","pages/Splash.js","pages/ManageEvents.js","pages/ManageRegistrations.js","App.js","index.js"],"names":["enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","state","action","type","busy","message","undefined","kind","title","text","user","payload","setItem","allEvents","allRegistrations","newAllEvents","concat","newAllRegistrations","filter","event","eventId","registrations","regId","serverURL","setBusy","a","resp","loginUser","email","password","fetch","method","headers","body","stringify","then","data","json","catch","console","log","retrieveEvents","events","retrieveEventRegistrations","createEvent","createEventRegistration","registration","updateEvent","ok","updateEventRegistration","removeEvent","removeEventRegistration","logoutUser","AppLayout","sideNav","profileModalShow","_handleLogout","location","href","props","logout","className","aria-label","onClick","setState","isActive","this","prefix","Modal","open","primaryButtonText","secondaryButtonText","onRequestClose","onRequestSubmit","onSecondarySubmit","style","textAlign","isRail","defaultExpanded","expanded","to","renderIcon","Home20","isAdmin","Event20","Catalog20","Notebook20","children","React","Component","connect","dispatch","Splash","loginModalShow","_handleLoginBtn","_handleEmailChange","e","target","value","_handlePasswordChange","_handleLoginSubmit","login","disabled","TextInput","id","labelText","light","placeholder","onChange","src","alt","width","marginLeft","marginRight","Button","Event32","Login32","TableContainer","DataTable","Table","TableHead","TableRow","TableBody","TableCell","TableHeader","TableToolbar","TableToolbarContent","ManageEvents","modalShow","eventDate","Date","getTime","eventLocation","eventHelpline","eventEmail","Math","random","toString","substring","totalTickets","mode","_handleEventDateChange","_handleEventLocationChange","_handleEventHelplineChange","_handleEventEmailChange","_handleTotalTicketsChange","imaginaryTarget","valueAsNumber","_handleAddEventPrep","_handleAddEvent","addEvent","_handleDeleteEvent","deleteEvent","_handleUpdateEventPrep","_handleUpdateEvent","editEvent","retrieveEventsList","Form","FormGroup","legendText","required","DatePicker","dateFormat","datePickerType","DatePickerInput","NumberInput","label","max","min","step","Content","tabIndex","size","key","map","Edit16","Delete16","ManageRegistrations","idCardStatus","registeredName","registeredPhone","registeredEmail","registeredIDCard","ticketCount","ticketCountDisabled","_handleNameChange","_handlePhoneChange","_handleIDCardChange","_handleEventIdChange","_handleTypeChange","_handleTicketCountChange","reader","FileReader","readAsDataURL","files","onload","result","length","alert","_handleAddEventRegistrationPrep","_handleAddEventRegistration","addEventRegistration","_handleDeleteEventRegistration","deleteEventRegistration","_handleUpdateEventRegistrationPrep","eventRegistration","_handleUpdateEventRegistration","editEventRegistration","retrieveEventRegistrationsList","FileUploader","accept","filenameStatus","buttonKind","buttonLabel","labelDescription","onDelete","Select","SelectItem","reg","App","Loading","description","active","withOverlay","exact","path","render","timeout","caption","toLocaleString","subtitle","subscribe","saveState","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9396e4dc.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './Reducers';\r\nimport { loadState } from './localStorage';\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n);\r\nconst persistedState = loadState() || {};\r\nconst store = createStore(reducer, persistedState, enhancer);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('stackhackv1');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('stackhackv1', serializedState);\r\n    } catch(err){\r\n        console.log(err);\r\n    }\r\n}","export const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"APP_BUSY\": {\r\n            return {\r\n                ...state,\r\n                busy: true,\r\n                message: undefined\r\n            }\r\n        }\r\n        case \"NETWORK_ERROR\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'error',\r\n                    title: 'Network Error',\r\n                    text: 'Check your network connection.'\r\n                }\r\n            }\r\n        }\r\n        case \"LOGIN_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                user: action.payload,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Login Success',\r\n                    text: 'Successfully logged in.'\r\n                }\r\n            }\r\n        }\r\n        case \"LOGIN_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'error',\r\n                    title: 'Login Error',\r\n                    text: 'Wrong email or password. Try again'\r\n                }\r\n            }\r\n        }\r\n        case \"LOGOUT\": {\r\n            localStorage.setItem('stackhackv1', '');\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                user: undefined,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Logout Success',\r\n                    text: 'Successfully logged out.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENTS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                allEvents: action.payload,\r\n                message: undefined\r\n            }\r\n        }\r\n        case \"EVENT_REGISTRATIONS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                allRegistrations: action.payload,\r\n                message: undefined\r\n            }\r\n        }\r\n        case \"EVENT_CREATION_SUCCESS\": {\r\n            let newAllEvents = state.allEvents.concat(action.payload)\r\n            return {\r\n                ...state,\r\n                allEvents: newAllEvents,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Created',\r\n                    text: 'Event created successfully.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENT_REGISTRATION_CREATION_SUCCESS\": {\r\n            let newAllRegistrations = state.allRegistrations.concat(action.payload)\r\n            return {\r\n                ...state,\r\n                allRegistrations: newAllRegistrations,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Registration Created',\r\n                    text: 'Event registration created successfully.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENT_UPDATION_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Updated',\r\n                    text: 'Event updated successfully.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENT_REGISTRATION_UPDATION_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Registration Updated',\r\n                    text: 'Event registration updated successfully.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENT_DELETION_SUCCESS\": {\r\n            let newAllEvents = state.allEvents.filter(event => {\r\n                return event.eventId !== action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                allEvents: newAllEvents,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Deleted',\r\n                    text: 'Event deleted successfully.'\r\n                }\r\n            }\r\n        }\r\n        case \"EVENT_REGISTRATION_DELETION_SUCCESS\": {\r\n            let newAllRegistrations = state.allRegistrations.filter(registrations => {\r\n                return registrations.regId !== action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                allRegistrations: newAllRegistrations,\r\n                message: {\r\n                    kind: 'success',\r\n                    title: 'Event Registration Deleted',\r\n                    text: 'Event registration deleted successfully.'\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const serverURL= \"https://hackstack-backend.herokuapp.com\";\r\n\r\nexport const setBusy = async() => {\r\n    return resp => {\r\n        resp({\r\n            type: \"APP_BUSY\"\r\n        });\r\n    }\r\n}\r\n\r\nexport const loginUser = async(email, password) => {\r\n    return user => {\r\n        fetch(`${serverURL}/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ email, password })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                user({\r\n                    type: \"LOGIN_SUCCESS\",\r\n                    payload: body\r\n                });\r\n            } else {\r\n                user({\r\n                    type: \"LOGIN_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while logging in', err);\r\n            user({\r\n                type: \"LOGIN_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const retrieveEvents = async() => {\r\n    return events => {\r\n        fetch(`${serverURL}/events`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                events({\r\n                    type: \"EVENTS_RETRIEVAL_SUCCESS\",\r\n                    payload: body\r\n                });\r\n            } else {\r\n                events({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            events({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const retrieveEventRegistrations = async() => {\r\n    return registrations => {\r\n        fetch(`${serverURL}/registrations`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                registrations({\r\n                    type: \"EVENT_REGISTRATIONS_RETRIEVAL_SUCCESS\",\r\n                    payload: body\r\n                });\r\n            } else {\r\n                registrations({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            registrations({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const createEvent = async(data) => {\r\n    return event => {\r\n        fetch(`${serverURL}/events`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                event({\r\n                    type: \"EVENT_CREATION_SUCCESS\",\r\n                    payload: body\r\n                });\r\n            } else {\r\n                event({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            event({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const createEventRegistration = async(data) => {\r\n    return registration => {\r\n        fetch(`${serverURL}/registrations`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                registration({\r\n                    type: \"EVENT_REGISTRATION_CREATION_SUCCESS\",\r\n                    payload: body\r\n                });\r\n            } else {\r\n                registration({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            registration({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateEvent = async(data) => {\r\n    return event => {\r\n        fetch(`${serverURL}/events`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(data => {\r\n            if(data.ok){\r\n                event({\r\n                    type: \"EVENT_UPDATION_SUCCESS\"\r\n                });\r\n            } else {\r\n                event({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            event({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateEventRegistration = async(data) => {\r\n    return registration => {\r\n        fetch(`${serverURL}/registrations`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(data => {\r\n            if(data.ok){\r\n                registration({\r\n                    type: \"EVENT_REGISTRAION_UPDATION_SUCCESS\"\r\n                });\r\n            } else {\r\n                registration({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            registration({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const removeEvent = async(eventId) => {\r\n    return event => {\r\n        fetch(`${serverURL}/events/${eventId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(data => {\r\n            if(data.ok){\r\n                event({\r\n                    type: \"EVENT_DELETION_SUCCESS\",\r\n                    payload: eventId\r\n                });\r\n            } else {\r\n                event({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            event({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const removeEventRegistration = async(regId) => {\r\n    return registration => {\r\n        fetch(`${serverURL}/registrations/${regId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(data => {\r\n            if(data.ok){\r\n                registration({\r\n                    type: \"EVENT_REGISTRATION_DELETION_SUCCESS\",\r\n                    payload: regId\r\n                });\r\n            } else {\r\n                registration({\r\n                    type: \"NETWORK_ERROR\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('network error', err);\r\n            registration({\r\n                type: \"NETWORK_ERROR\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutUser = async() => {\r\n    return user => {\r\n        user({\r\n            type: \"LOGOUT\",\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n  Link,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Header,\r\n  HeaderMenuButton,  \r\n  HeaderName,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SideNav,\r\n  SideNavItems,\r\n  SideNavLink,\r\n  Content\r\n} from \"carbon-components-react/lib/components/UIShell\";\r\nimport { Modal } from 'carbon-components-react';\r\nimport { Event20, Home20, Catalog20, Notebook20, User20 } from '@carbon/icons-react';\r\nimport { logoutUser, setBusy } from '../Actions';\r\n \r\nclass AppLayout extends React.Component {\r\n\r\n  state = {\r\n    sideNav: false,\r\n    profileModalShow: false\r\n  }\r\n\r\n  _handleLogout = async() => {\r\n    window.location.href = \"/\";\r\n    await this.props.logout();\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"container\" >\r\n        <HashRouter>\r\n          <Header aria-label=\"Platform\">\r\n            <HeaderMenuButton\r\n              aria-label=\"Open menu\"\r\n              onClick={() => this.setState({sideNav: !this.state.sideNav})}\r\n              isActive={this.state.sideNav}\r\n            />\r\n              <HeaderName href=\"#home\" prefix=\"\">\r\n                StackHack v1\r\n              </HeaderName>\r\n            <HeaderGlobalBar>\r\n              {\r\n                this.props.user?\r\n                <>\r\n                  <HeaderGlobalAction onClick={() => this.setState({profileModalShow: true})} aria-label=\"User\">\r\n                    <User20 />\r\n                  </HeaderGlobalAction>\r\n                  <Modal \r\n                    open={this.state.profileModalShow}\r\n                    primaryButtonText=\"Close\"\r\n                    secondaryButtonText=\"Logout\"\r\n                    onRequestClose={() => this.setState({profileModalShow: false})}\r\n                    onRequestSubmit={() => this.setState({profileModalShow: false})}\r\n                    onSecondarySubmit={this._handleLogout}\r\n                  >\r\n                    <>\r\n                      <div style={{textAlign: 'center'}}>\r\n                        Logged in as <strong>{this.props.user.email}</strong>\r\n                      </div>\r\n                    </>\r\n                  </Modal>\r\n                </>:\r\n                <></>\r\n              }\r\n            </HeaderGlobalBar>\r\n            <SideNav aria-label=\"Side navigation\" isRail={true} defaultExpanded={false} expanded={this.state.sideNav}>\r\n              <SideNavItems>\r\n                  <Link to=\"/home\">\r\n                    <SideNavLink renderIcon={Home20}>\r\n                      Home\r\n                    </SideNavLink>\r\n                  </Link>\r\n                  {\r\n                    this.props.user?\r\n                    !this.props.user.isAdmin?\r\n                      <>\r\n                        <SideNavLink href=\"#adminRegistrations\" renderIcon={Event20}>\r\n                          Event Registration\r\n                        </SideNavLink>\r\n                        <SideNavLink href=\"#adminEvents\" renderIcon={Notebook20}>\r\n                          All Events\r\n                        </SideNavLink>\r\n                      </>:\r\n                      <>\r\n                        <SideNavLink href=\"#adminEvents\" renderIcon={Event20}>\r\n                          Manage All Events\r\n                        </SideNavLink>\r\n                        <SideNavLink href=\"#adminRegistrations\" renderIcon={Catalog20}>\r\n                          Manage All Event Registrations\r\n                        </SideNavLink>\r\n                      </>:\r\n                    <></>\r\n                  }\r\n              </SideNavItems>\r\n            </SideNav>\r\n          </Header>\r\n        </HashRouter>\r\n        <Content>\r\n          {this.props.children}\r\n        </Content>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    user: state.user,\r\n    busy: state.busy\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      logout: async() => {\r\n          dispatch(await setBusy());\r\n          dispatch(await logoutUser());\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppLayout);","import React from 'react';\r\nimport { loginUser, setBusy } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, TextInput } from 'carbon-components-react';\r\nimport { Login32, Event32 } from '@carbon/icons-react';\r\nclass Splash extends React.Component {\r\n    state = {\r\n        loginModalShow: false,\r\n        email: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    _handleLoginBtn = () => {\r\n        this.setState({loginModalShow: true});\r\n    }\r\n\r\n    _handleEmailChange = (e) => {\r\n        this.setState({email: e.target.value});\r\n    }\r\n\r\n    _handlePasswordChange = (e) => {\r\n        this.setState({password: e.target.value});\r\n    }\r\n\r\n    _handleLoginSubmit = async() => {\r\n        this.setState({loginModalShow: false, email: \"\", password: \"\"});\r\n        await this.props.login(this.state.email, this.state.password);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={{textAlign: 'center'}}>\r\n            <Modal \r\n                    open={this.state.loginModalShow}\r\n                    primaryButtonText=\"Login\"\r\n                    secondaryButtonText=\"Close\"\r\n                    onRequestClose={() => this.setState({loginModalShow: false})}\r\n                    onRequestSubmit={this._handleLoginSubmit}\r\n                    onSecondarySubmit={() => this.setState({loginModalShow: false})}\r\n                    disabled={true}\r\n                >\r\n                    <TextInput\r\n                        id=\"email\"\r\n                        disabled={false}\r\n                        labelText=\"Your Email:\"\r\n                        light={false}\r\n                        placeholder=\"mark@example.com\"\r\n                        value={this.state.email}\r\n                        type=\"text\"\r\n                        onChange={this._handleEmailChange}\r\n                    />\r\n                    <br/>\r\n                    <TextInput\r\n                        id=\"password\"\r\n                        disabled={false}\r\n                        labelText=\"Your Password:\"\r\n                        light={false}\r\n                        placeholder=\"**********\"\r\n                        value={this.state.password}\r\n                        type=\"password\"\r\n                        onChange={this._handlePasswordChange}\r\n                    />\r\n                </Modal>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <div>\r\n                        <img src=\"https://s3-ap-southeast-1.amazonaws.com/he-public-data/StackHack1.0%20Themes-021837f1c.png\" alt=\"poster\" width=\"30%\"></img>\r\n                    </div>\r\n                    {\r\n                        (this.props.user && this.props.user.isAdmin)?\r\n                        <div style={{marginLeft: 'auto', marginRight: 'auto'}} className=\"bx--form__helper-text\">Admin Priveleges: <strong>ACTIVATED</strong></div>:\r\n                        <></>\r\n                    }\r\n                    <br />\r\n                    {\r\n                        !this.props.user?\r\n                        <Button renderIcon={Login32} onClick={this._handleLoginBtn}>Login</Button>:\r\n                        <Button renderIcon={Event32} href=\"#/adminRegistrations\">Event Registration</Button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      busy: state.busy,\r\n      user: state.user\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: async(email, password) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await loginUser(email, password));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Splash);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { retrieveEvents, createEvent, removeEvent, setBusy, updateEvent } from '../Actions';\r\nimport { DataTable, Content, Button, Modal, Form, FormGroup, NumberInput, TextInput, DatePicker, DatePickerInput } from 'carbon-components-react';\r\nimport { Delete16, Edit16 } from '@carbon/icons-react';\r\nconst {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHeader,\r\n    TableToolbar,\r\n    TableToolbarContent\r\n} = DataTable;\r\n\r\n\r\nclass ManageEvents extends React.Component {\r\n    state = {\r\n        modalShow: false,\r\n        eventDate: new Date().getTime(),\r\n        eventLocation: \"\",\r\n        eventHelpline: \"\",\r\n        eventEmail: \"\",\r\n        eventId: Math.random().toString(36).substring(2, 15),\r\n        totalTickets: 100,\r\n        mode: 0\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.retrieveEventsList();\r\n    }\r\n\r\n    _handleEventDateChange = (e) => {\r\n        this.setState({eventDate: new Date(e).getTime()});\r\n    }\r\n\r\n    _handleEventLocationChange = (e) => {\r\n        this.setState({eventLocation: e.target.value});\r\n    }\r\n\r\n    _handleEventHelplineChange = (e) => {\r\n        this.setState({eventHelpline: e.target.value});\r\n    }\r\n\r\n    _handleEventEmailChange = (e) => {\r\n        this.setState({eventEmail: e.target.value});\r\n    }\r\n    \r\n    _handleTotalTicketsChange = (e) => {\r\n        this.setState({totalTickets: e.imaginaryTarget.valueAsNumber});\r\n    }\r\n\r\n    _handleAddEventPrep = () => {\r\n        this.setState({\r\n            eventId: Math.random().toString(36).substring(2, 15), \r\n            eventLocation: \"\", \r\n            eventHelpline: \"\", \r\n            eventEmail: \"\", \r\n            eventDate: new Date().getTime(), \r\n            totalTickets: 0, \r\n            modalShow: true, \r\n            mode: 0\r\n        })\r\n    }\r\n\r\n    _handleAddEvent = async() => {\r\n        await this.props.addEvent({\r\n            eventId: this.state.eventId,\r\n            eventDate: this.state.eventDate,\r\n            eventLocation: this.state.eventLocation,\r\n            eventHelpline: this.state.eventHelpline,\r\n            eventEmail: this.state.eventEmail,\r\n            totalTickets: this.state.totalTickets\r\n        });\r\n        this.setState({\r\n            eventId: Math.random().toString(36).substring(2, 15), \r\n            eventLocation: \"\", \r\n            eventHelpline: \"\", \r\n            eventEmail: \"\", \r\n            eventDate: new Date().getTime(), \r\n            totalTickets: 0, \r\n            modalShow: false, \r\n            mode: 0\r\n        });\r\n    }\r\n\r\n    _handleDeleteEvent = async(eventId) => {\r\n        await this.props.deleteEvent(eventId);\r\n    }\r\n\r\n    _handleUpdateEventPrep = (event) => {\r\n        this.setState({\r\n            eventId: event.eventId,\r\n            eventDate: event.eventDate,\r\n            eventLocation: event.eventLocation,\r\n            eventHelpline: event.eventHelpline,\r\n            eventEmail: event.eventEmail,\r\n            totalTickets: event.totalTickets,\r\n            modalShow: true,\r\n            mode: 1\r\n        });\r\n    }\r\n\r\n    _handleUpdateEvent = async() => {\r\n        await this.props.editEvent({\r\n            eventId: this.state.eventId,\r\n            eventDate: this.state.eventDate,\r\n            eventLocation: this.state.eventLocation,\r\n            eventHelpline: this.state.eventHelpline,\r\n            eventEmail: this.state.eventEmail,\r\n            totalTickets: this.state.totalTickets\r\n        });\r\n        this.setState({\r\n            eventId: Math.random().toString(36).substring(2, 15), \r\n            eventLocation: \"\", \r\n            eventHelpline: \"\", \r\n            eventEmail: \"\", \r\n            eventDate: new Date().getTime(), \r\n            totalTickets: 0, \r\n            modalShow: false, \r\n            mode: 0\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <Modal \r\n                    open={this.state.modalShow}\r\n                    primaryButtonText=\"Close\"\r\n                    secondaryButtonText={!this.state.mode?\"Add\":\"Update\"}\r\n                    onRequestClose={() => this.setState({modalShow: false, mode: 0})}\r\n                    onRequestSubmit={() => this.setState({modalShow: false})}\r\n                    onSecondarySubmit={!this.state.mode?this._handleAddEvent:this._handleUpdateEvent}\r\n                >\r\n                    <Form>\r\n                        <FormGroup legendText={\"Event Details\"}>\r\n                            <TextInput\r\n                                id=\"event-id\"\r\n                                disabled={true}\r\n                                value={this.state.eventId}\r\n                                labelText=\"Event ID (Auto-Generated)\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <DatePicker required dateFormat=\"m/d/Y\" datePickerType=\"single\" value={this.state.eventDate} onChange={this._handleEventDateChange}>\r\n                                <DatePickerInput \r\n                                    id=\"event-date\"\r\n                                    placeholder=\"mm/dd/yyyy\"\r\n                                    labelText=\"Event Date\"\r\n                                    type=\"text\"\r\n                                />\r\n                            </DatePicker>\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-location\"\r\n                                value={this.state.eventLocation}\r\n                                labelText=\"Event Location\"\r\n                                onChange={this._handleEventLocationChange}\r\n                                placeholder=\"Moon Heights, Bangalore\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-helpline\"\r\n                                value={this.state.eventHelpline}\r\n                                labelText=\"Event Helpline\"\r\n                                onChange={this._handleEventHelplineChange}\r\n                                placeholder=\"9999999999\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-email\"\r\n                                value={this.state.eventEmail}\r\n                                labelText=\"Event EMail\"\r\n                                onChange={this._handleEventEmailChange}\r\n                                placeholder=\"abc@example.com\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <NumberInput\r\n                                id=\"total-tickets\"\r\n                                label=\"Total Tickets\"\r\n                                max={50000}\r\n                                min={1}\r\n                                onChange={this._handleTotalTicketsChange}\r\n                                step={1}\r\n                                value={this.state.totalTickets}\r\n                                required\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Modal>\r\n                <Content>\r\n                    <TableContainer title=\"All Events\">\r\n                        <TableToolbar>\r\n                            <TableToolbarContent>\r\n                                <Button\r\n                                    disabled={!this.props.user.isAdmin}\r\n                                    tabIndex={0}\r\n                                    onClick={() => this._handleAddEventPrep()}\r\n                                    size=\"small\"\r\n                                    kind=\"primary\">\r\n                                    Add Event\r\n                                </Button>\r\n                            </TableToolbarContent>\r\n                            </TableToolbar>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableHeader key=\"edit\">\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventId\">\r\n                                        Event Id\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventDate\">\r\n                                        Event Date\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventLocation\">\r\n                                        Event Location\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventHelpline\">\r\n                                        Event Helpline\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventEMail\">\r\n                                        Event EMail\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"totalTickets\">\r\n                                        Total Tickets\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"delete\">\r\n                                    </TableHeader>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    this.props.allEvents?\r\n                                    this.props.allEvents.map(event => {\r\n                                        return(\r\n                                            <TableRow key={event.eventId}>\r\n                                                <TableCell>\r\n                                                    <Button disabled={!this.props.user.isAdmin} kind={\"ghost\"} renderIcon={Edit16} onClick={() => this._handleUpdateEventPrep(event)} />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.eventId}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.eventDate}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.eventLocation}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.eventHelpline}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.eventEmail}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {event.totalTickets}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <Button disabled={!this.props.user.isAdmin} kind={\"ghost\"} renderIcon={Delete16} onClick={() => this._handleDeleteEvent(event.eventId)}/>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    }):\r\n                                    <></>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Content>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      allEvents: state.allEvents,\r\n      user: state.user,\r\n      busy: state.busy\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        retrieveEventsList: async() => {\r\n            dispatch(await setBusy());\r\n            dispatch(await retrieveEvents());\r\n        },\r\n        addEvent: async(data) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await createEvent(data));\r\n        },\r\n        deleteEvent: async(eventId) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await removeEvent(eventId));\r\n        },\r\n        editEvent: async(data) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await updateEvent(data));\r\n            dispatch(await retrieveEvents());\r\n        }\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ManageEvents);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { retrieveEventRegistrations, createEventRegistration, removeEventRegistration, setBusy, updateEventRegistration } from '../Actions';\r\nimport { DataTable, Content, Button, Modal, Form, FormGroup, NumberInput, TextInput, Select, FileUploader, SelectItem } from 'carbon-components-react';\r\nimport { Delete16, Edit16 } from '@carbon/icons-react';\r\nconst {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHeader,\r\n    TableToolbar,\r\n    TableToolbarContent\r\n} = DataTable;\r\n\r\n\r\nclass ManageRegistrations extends React.Component {\r\n    state = {\r\n        idCardStatus: 'edit',\r\n        modalShow: false,\r\n        registeredName: \"\",\r\n        registeredPhone: \"\",\r\n        registeredEmail: \"\",\r\n        registeredIDCard: \"\",\r\n        eventId: this.props.allEvents[0].eventId,\r\n        type: \"Self\",\r\n        ticketCount: 1,\r\n        regId: Math.random().toString(36).substring(2, 15),\r\n        mode: 0,\r\n        ticketCountDisabled: true\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.retrieveEventRegistrationsList();\r\n    }\r\n\r\n    _handleNameChange = (e) => {\r\n        this.setState({registeredName: e.target.value});\r\n    }\r\n\r\n    _handlePhoneChange = (e) => {\r\n        this.setState({registeredPhone: e.target.value});\r\n    }\r\n\r\n    _handleEmailChange = (e) => {\r\n        this.setState({registeredEmail: e.target.value});\r\n    }\r\n\r\n    _handleIDCardChange = (e) => {\r\n        this.setState({registeredIDCard: e.target.value});\r\n    }\r\n    \r\n    _handleEventIdChange = (e) => {\r\n        this.setState({eventId: e.target.value});\r\n    }\r\n\r\n    _handleTypeChange = (e) => {\r\n        if(e.target.value === \"Self\"){\r\n            this.setState({ticketCount: 1, ticketCountDisabled: true})\r\n        } else {\r\n            this.setState({ticketCountDisabled: false})\r\n        }\r\n        this.setState({type: e.target.value});\r\n    }\r\n\r\n    _handleTicketCountChange = (e) => {\r\n        this.setState({ticketCount: e.imaginaryTarget.valueAsNumber});\r\n    }\r\n\r\n    _handleIDCardChange = (e) => {\r\n        this.setState({idCardStatus: 'uploading'});\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        reader.onload = (e) => {\r\n            let size = (((6*e.target.result.length)/8)/1024);\r\n            if(size > 100){\r\n                alert('File size is bigger than expected. Backend DB may reject the request.');\r\n            }\r\n            this.setState({registeredIDCard: e.target.result, idCardStatus: 'edit'});\r\n        }\r\n    }\r\n\r\n    _handleAddEventRegistrationPrep = () => {\r\n        this.setState({\r\n            modalShow: true,\r\n            registeredName: \"\",\r\n            registeredPhone: \"\",\r\n            registeredEmail: \"\",\r\n            registeredIDCard: \"\",\r\n            type: \"Self\",\r\n            ticketCount: 1,\r\n            regId: Math.random().toString(36).substring(2, 15),\r\n            mode: 0\r\n        })\r\n    }\r\n\r\n    _handleAddEventRegistration = async() => {\r\n        await this.props.addEventRegistration({\r\n            registeredName: this.state.registeredName,\r\n            registeredPhone: this.state.registeredPhone,\r\n            registeredEmail: this.state.registeredEmail,\r\n            registeredIDCard: this.state.registeredIDCard,\r\n            eventId: this.state.eventId,\r\n            type: this.state.type,\r\n            ticketCount: this.state.ticketCount,\r\n            regId: this.state.regId\r\n        });\r\n        this.setState({\r\n            modalShow: false,\r\n            registeredName: \"\",\r\n            registeredPhone: \"\",\r\n            registeredEmail: \"\",\r\n            registeredIDCard: \"\",\r\n            type: \"Self\",\r\n            ticketCount: 1,\r\n            regId: Math.random().toString(36).substring(2, 15),\r\n            mode: 0\r\n        });\r\n    }\r\n\r\n    _handleDeleteEventRegistration = async(regId) => {\r\n        await this.props.deleteEventRegistration(regId);\r\n    }\r\n\r\n    _handleUpdateEventRegistrationPrep = (eventRegistration) => {\r\n        console.log(eventRegistration);\r\n        this.setState({\r\n            registeredPhone: eventRegistration.registeredPhone,\r\n            registeredName: eventRegistration.registeredName,\r\n            registeredEmail: eventRegistration.registeredEmail,\r\n            registeredIDCard: eventRegistration.registeredIDCard,\r\n            eventId: eventRegistration.eventId,\r\n            type: eventRegistration.type,\r\n            ticketCount: eventRegistration.ticketCount,\r\n            regId: eventRegistration.regId,\r\n            mode: 1,\r\n            modalShow: true\r\n        });\r\n    }\r\n\r\n    _handleUpdateEventRegistration = async() => {\r\n        await this.props.editEventRegistration({\r\n            registeredName: this.state.registeredName,\r\n            registeredPhone: this.state.registeredPhone,\r\n            registeredEmail: this.state.registeredEmail,\r\n            registeredIDCard: this.state.registeredIDCard,\r\n            eventId: this.state.eventId,\r\n            type: this.state.type,\r\n            ticketCount: this.state.ticketCount,\r\n            regId: this.state.regId\r\n        });\r\n        this.setState({\r\n            modalShow: false,\r\n            registeredName: \"\",\r\n            registeredPhone: \"\",\r\n            registeredEmail: \"\",\r\n            registeredIDCard: \"\",\r\n            type: \"Self\",\r\n            ticketCount: 1,\r\n            regId: Math.random().toString(36).substring(2, 15),\r\n            mode: 0\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <Modal \r\n                    open={this.state.modalShow}\r\n                    primaryButtonText=\"Close\"\r\n                    secondaryButtonText={!this.state.mode?\"Add\":\"Update\"}\r\n                    onRequestClose={() => this.setState({modalShow: false, mode: 0})}\r\n                    onRequestSubmit={() => this.setState({modalShow: false})}\r\n                    onSecondarySubmit={!this.state.mode?this._handleAddEventRegistration:this._handleUpdateEventRegistration}\r\n                >\r\n                    <Form>\r\n                        <FormGroup legendText={\"Event Registrations Details\"}>\r\n                            <TextInput\r\n                                id=\"event-reg-id\"\r\n                                disabled={true}\r\n                                value={this.state.regId}\r\n                                labelText=\"Event Registration ID (Auto-Generated)\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-reg-name\"\r\n                                value={this.state.registeredName}\r\n                                labelText=\"Registered Name\"\r\n                                onChange={this._handleNameChange}\r\n                                placeholder=\"Mark Clair\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-reg-phone\"\r\n                                value={this.state.registeredPhone}\r\n                                labelText=\"Registered Phone\"\r\n                                onChange={this._handlePhoneChange}\r\n                                placeholder=\"9999999999\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <TextInput\r\n                                id=\"event-helpline\"\r\n                                value={this.state.registeredEmail}\r\n                                labelText=\"Registered Email\"\r\n                                onChange={this._handleEmailChange}\r\n                                placeholder=\"abc@example.com\"\r\n                                type=\"text\"\r\n                                required\r\n                            />\r\n                            <br />\r\n                            <FileUploader\r\n                                accept={[\r\n                                    '.jpg',\r\n                                    '.png'\r\n                                ]}\r\n                                required\r\n                                filenameStatus={this.state.idCardStatus}\r\n                                buttonKind=\"primary\"\r\n                                buttonLabel={this.state.mode?\"Change\":\"Upload ID Card\"}\r\n                                labelDescription=\"only jpg/png files upto 100kb are allowed\"\r\n                                onDelete={() => this.setState({registeredIDCard: \"\"})}\r\n                                onChange={this._handleIDCardChange}\r\n                            />\r\n                            <br />\r\n                            <Select value={this.state.type} required labelText=\"Type\" onChange={this._handleTypeChange}>\r\n                                <SelectItem\r\n                                    text=\"Self\"\r\n                                    value=\"Self\"\r\n                                />\r\n                                <SelectItem \r\n                                    text=\"Group\"\r\n                                    value=\"Group\"\r\n                                />\r\n                                <SelectItem \r\n                                    text=\"Corporate\"\r\n                                    value=\"Corporate\"\r\n                                />\r\n                                <SelectItem \r\n                                    text=\"Others\"\r\n                                    value=\"Others\"\r\n                                />\r\n                            </Select>\r\n                            <br />\r\n                            <Select required labelText=\"Event ID\" value={this.state.eventId} onChange={this._handleEventIdChange}>\r\n                                {\r\n                                    this.props.allEvents?\r\n                                    this.props.allEvents.map(event => {\r\n                                        return(\r\n                                            <SelectItem \r\n                                                text={event.eventId}\r\n                                                value={event.eventId}\r\n                                            />\r\n                                        )\r\n                                    }):\r\n                                    <></>\r\n                                }\r\n                            </Select>\r\n                            <br />\r\n                            <NumberInput\r\n                                required\r\n                                id=\"ticket-count\"\r\n                                label=\"Ticket Count\"\r\n                                max={50000}\r\n                                min={1}\r\n                                disabled={this.state.ticketCountDisabled}\r\n                                onChange={this._handleTicketCountChange}\r\n                                step={1}\r\n                                value={this.state.ticketCount}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Modal>\r\n                <Content>\r\n                    <TableContainer title=\"All Event Registrations\">\r\n                        <TableToolbar>\r\n                            <TableToolbarContent>\r\n                                <Button\r\n                                    tabIndex={0}\r\n                                    onClick={() => this._handleAddEventRegistrationPrep()}\r\n                                    size=\"small\"\r\n                                    kind=\"primary\">\r\n                                    Add Event Registration\r\n                                </Button>\r\n                            </TableToolbarContent>\r\n                        </TableToolbar>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableHeader key=\"edit\">\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventId\">\r\n                                        Registration Id\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventDate\">\r\n                                        Registered Name\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventLocation\">\r\n                                        Registered Phone\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventHelpline\">\r\n                                        Registered Email\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"eventEMail\">\r\n                                        Registered ID Card\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"totalTickets\">\r\n                                        Event ID\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"totalTickets\">\r\n                                        Type\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"totalTickets\">\r\n                                        Ticket Count\r\n                                    </TableHeader>\r\n                                    <TableHeader key=\"delete\">\r\n                                    </TableHeader>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    this.props.allRegistrations?\r\n                                    this.props.allRegistrations.map(reg => {\r\n                                        return(\r\n                                            <TableRow key={reg.regId}>\r\n                                                <TableCell>\r\n                                                    <Button disabled={!this.props.user.isAdmin} kind={\"ghost\"} renderIcon={Edit16} onClick={() => this._handleUpdateEventRegistrationPrep(reg)} />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.regId}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.registeredName}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.registeredPhone}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.registeredEmail}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <img src={reg.registeredIDCard} width=\"64\" alt={`id ${reg.regId}`}/>\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.eventId}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.type}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {reg.ticketCount}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <Button disabled={!this.props.user.isAdmin} kind={\"ghost\"} renderIcon={Delete16} onClick={() => this._handleDeleteEventRegistration(reg.regId)}/>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    }):\r\n                                    <></>\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Content>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      allRegistrations: state.allRegistrations,\r\n      allEvents: state.allEvents,\r\n      user: state.user,\r\n      busy: state.busy\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        retrieveEventRegistrationsList: async() => {\r\n            dispatch(await setBusy());\r\n            dispatch(await retrieveEventRegistrations());\r\n        },\r\n        addEventRegistration: async(data) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await createEventRegistration(data));\r\n        },\r\n        deleteEventRegistration: async(eventId) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await removeEventRegistration(eventId));\r\n        },\r\n        editEventRegistration: async(data) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await updateEventRegistration(data));\r\n            dispatch(await retrieveEventRegistrations());\r\n        }\r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ManageRegistrations);","import React from 'react';\nimport { Loading, ToastNotification } from 'carbon-components-react';\nimport { connect } from 'react-redux';\nimport { Route, HashRouter } from 'react-router-dom';\nimport AppLayout from './components/AppLayout';\nimport Splash from './pages/Splash';\nimport ManageEvents from './pages/ManageEvents';\nimport ManageRegistrations from './pages/ManageRegistrations';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n          {this.props.busy?<Loading description={\"Loading, please wait...\"} active={true} withOverlay={true}/>:<></>}\n          <AppLayout >\n            <HashRouter>\n                <Route exact path=\"/\" render={() => <Splash />}></Route>\n                <Route exact path=\"/home\" render={() => <Splash />}></Route>\n                <Route path=\"/adminEvents\" render={() => <ManageEvents />}></Route>\n                <Route path=\"/adminRegistrations\" render={() => <ManageRegistrations/>}></Route>\n            </HashRouter>\n          </AppLayout>\n          {this.props.message?<div className=\"toast\"><ToastNotification timeout={5000} kind={this.props.message.kind} caption={new Date().toLocaleString()} title={this.props.message.title} subtitle={<span>{this.props.message.text}</span>} /></div>:<></>}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    busy: state.busy,\n    message: state.message\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import store from './Store';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}